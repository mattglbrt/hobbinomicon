---
// Icons
import Search from "@/components/fundations/icons/Search.astro";
// Content
import { getCollection } from "astro:content";
const posts = await Promise.all(
  (await getCollection("posts")).map(async (post) => ({
    slug: post.slug,
    image: post.data.image,
    tags: post.data.tags,
    title: post.data.title,
    pubDate: post.data.pubDate,
    description: post.data.description,
  }))
);
---

<div class="relative">
  <button
    type="button"
    id="searchButton"
    aria-label="Search posts"
    class="rounded-lg bg-base-100 p-1.5 text-base-600 shadow-xs hover:bg-base-50 focus-visible:outline-2 focus-visible:outline-offset-2 focus:outline-base-400 cursor-pointer focus:outline-2 focus:outline-inset"
  >
    <Search class="size-4" />
  </button>
  <div
    id="searchModal"
    class="fixed inset-0 z-90 overflow-y-auto hidden"
    role="dialog"
    aria-modal="true"
  >
    <div class="min-h-screen px-4 text-center">
      <div
        class="fixed inset-0 bg-white/50 transition-opacity"
        id="modalOverlay"
      >
      </div>
      <div
        class="inline-block w-full max-w-2xl px-8 mb-8 mt-12 lg:mt-48 p-8 bg-base-50 rounded-xl text-left align-middle transition-all transform"
      >
        <div class="hidden">
          <button
            type="button"
            id="closeSearch"
            class="text-base-600 hover:text-base-700 cursor-pointer ml-auto"
            aria-label="Close search"
          >
            <svg
              width="15"
              height="15"
              viewBox="0 0 15 15"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
              ><path
                d="M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704ZM9.85358 5.14644C10.0488 5.3417 10.0488 5.65829 9.85358 5.85355L8.20713 7.49999L9.85358 9.14644C10.0488 9.3417 10.0488 9.65829 9.85358 9.85355C9.65832 10.0488 9.34173 10.0488 9.14647 9.85355L7.50002 8.2071L5.85358 9.85355C5.65832 10.0488 5.34173 10.0488 5.14647 9.85355C4.95121 9.65829 4.95121 9.3417 5.14647 9.14644L6.79292 7.49999L5.14647 5.85355C4.95121 5.65829 4.95121 5.3417 5.14647 5.14644C5.34173 4.95118 5.65832 4.95118 5.85358 5.14644L7.50002 6.79289L9.14647 5.14644C9.34173 4.95118 9.65832 4.95118 9.85358 5.14644Z"
                fill="currentColor"
                fill-rule="evenodd"
                clip-rule="evenodd"></path></svg
            >
          </button>
        </div>
        <input
          type="text"
          id="searchInput"
          placeholder="Search posts..."
          class="block w-full h-10 px-4 py-2 text-sm text-accent-700 border border-transparent rounded-lg appearance-none duration-300 bg-base-100 placeholder-base-400 focus:bg-transparent focus:outline-none focus:ring-accent-500 focus:ring-offset-2 focus:ring-2 focus:ring-offset-base-200"
        />
        <div>
          <div
            id="searchResults"
            class="max-h-100 overflow-y-auto bg-base-50 w-full scrollbar-hide rounded-xl mt-2 p-2"
          >
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script is:inline define:vars={{ posts }}>
  window.addEventListener("load", () => {
    const searchButton = document.getElementById("searchButton");
    const searchModal = document.getElementById("searchModal");
    const modalOverlay = document.getElementById("modalOverlay");
    const searchInput = document.getElementById("searchInput");
    const searchResults = document.getElementById("searchResults");
    const closeSearch = document.getElementById("closeSearch");

    const fuse = new Fuse(posts, {
      keys: ["title", "description", "pubDate", "image", "tags"],
      threshold: 0.3,
      includeMatches: true,
    });

    let currentIndex = -1; // Variable to track the currently highlighted result

    // Function to close the search modal
    function closeSearchModal(e) {
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }
      searchModal.classList.add("hidden"); // Hide modal
      document.body.style.overflow = ""; // Restore scrolling

      // Clear the input and results
      searchInput.value = ""; // Clear search input field
      searchResults.innerHTML = ""; // Clear search results
      searchResults.classList.add("hidden"); // Ensure results remain hidden
    }

    // Render search results
    function renderResults(results) {
      if (!searchInput.value.trim()) {
        searchResults.innerHTML = "";
        searchResults.classList.add("hidden");
        return;
      }

      if (results.length === 0) {
        searchResults.innerHTML = `
        <div>
          <h3 class="font-medium text-base text-base-900 p-8 font-medium">
            There's nothing here,...
          </h3>
        </div>
        `;
        searchResults.classList.remove("hidden");
        return;
      }

      searchResults.innerHTML = results
        .map((result, index) => {
          return `
          <a href="/blog/posts/${result.item.slug}" class="block p-4 duration-300 hover:bg-base-100 rounded-xl 4 focus:ring-accent-500 focus:bg-base-5 grid grid-cols-3 gap-4 items-center" id="result-${index}">
            <img src="${result.item.image?.url || "/default-image.jpg"}" alt="${result.item.image?.alt || "No image available"}" 
            class="object-cover aspect-12/8 w-full rounded-lg object-top">
            <div class="col-span-2 flex flex-col">
              <div class="flex items-center gap-1">
                <div class="flex items-center gap-1">
                  ${
                    result.item.tags
                      ? result.item.tags
                          .map(
                            (cat) =>
                              `<span class="text-xs capitalize text-base-500">${cat}</span>`
                          )
                          .join(" , ")
                      : ""
                  }
                </div>
                <span>Â·</span>
                <p class="text-xs text-base-500 block">
                  ${new Date(result.item.pubDate).toLocaleDateString("en-US", {
                    year: "numeric",
                    month: "long",
                    day: "2-digit",
                  })}
                </p>
              </div>
              <h3 class="font-medium text-xs md:text-xl lg:text-2xl lg:text-balance font-display mt-2 text-base-900 block">
                ${result.item.title}
              </h3>
             
            </div>
          </a>
        `;
        })
        .join("");

      searchResults.classList.remove("hidden");
      currentIndex = -1; // Reset to no highlighted item after results are rendered
    }

    // Open search modal
    function openSearch(e) {
      e.preventDefault();
      e.stopPropagation();
      searchModal.classList.remove("hidden");
      document.body.style.overflow = "hidden";
      setTimeout(() => searchInput.focus(), 100);
    }

    // Event listeners
    searchButton.addEventListener("click", openSearch);
    closeSearch.addEventListener("click", closeSearchModal);
    modalOverlay.addEventListener("click", closeSearchModal);

    // Perform search when input changes
    searchInput.addEventListener("input", (e) => {
      const value = e.target.value.trim();
      const results = value ? fuse.search(value) : [];
      renderResults(results);
    });

    // Close search on Escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && !searchModal.classList.contains("hidden")) {
        closeSearchModal();
      }
    });

    // Keyboard navigation with arrow keys
    document.addEventListener("keydown", (e) => {
      const resultElements = Array.from(
        searchResults.getElementsByTagName("a")
      );

      if (e.key === "ArrowDown") {
        if (currentIndex < resultElements.length - 1) {
          currentIndex++;
        }
      } else if (e.key === "ArrowUp") {
        if (currentIndex > 0) {
          currentIndex--;
        }
      }

      if (currentIndex >= 0 && currentIndex < resultElements.length) {
        resultElements[currentIndex].focus(); // Focus on the current item
        resultElements[currentIndex].scrollIntoView({
          behavior: "smooth",
          block: "nearest",
        });
      }
    });
  });
</script>
