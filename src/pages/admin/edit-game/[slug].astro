---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { supabase } from "../../../lib/supabase";

const { slug } = Astro.params;
const { data: game } = await supabase.from("games").select("*").eq("slug", slug).single();

let status = "";

async function handleSubmit(event) {
  event.preventDefault();
  const formData = new FormData(event.target);

  const updatedGame = {
    title: formData.get("title"),
    slug: formData.get("slug") || formData.get("title")?.toLowerCase().replace(/\s+/g, "-"),
    tagline: formData.get("tagline"),
    description: formData.get("description"),
    genre: formData.get("genre"),
    tone: formData.get("tone"),
    how_to_play: formData.get("how_to_play"),
    key_features: formData.get("key_features")?.split(",").map(f => f.trim()).filter(Boolean),
    difficulty_to_learn: formData.get("difficulty_to_learn"),
    difficulty_to_master: formData.get("difficulty_to_master"),
    publication_year: parseInt(formData.get("publication_year")),
    min_players: parseInt(formData.get("min_players")),
    max_players: parseInt(formData.get("max_players")),
    play_time: formData.get("play_time"),
    age_range: formData.get("age_range"),
    solo_mode: formData.get("solo_mode") === "on",
    organized_play: formData.get("organized_play") === "on",
    online_play: formData.get("online_play") === "on",
    official_website: formData.get("official_website"),
    rules_url: formData.get("rules_url"),
    featured_image_url: formData.get("featured_image_url"),
    gallery: formData.get("gallery")?.split(",").map(url => url.trim()).filter(Boolean),
    video_url: formData.get("video_url"),
    community_links: formData.get("community_links")?.split(",").map(url => url.trim()).filter(Boolean),
    price_range: formData.get("price_range"),
    where_to_buy: formData.get("where_to_buy")?.split(",").map(url => url.trim()).filter(Boolean),
    social_links: formData.get("social_links")?.split(",").map(url => url.trim()).filter(Boolean),
    tags: formData.get("tags")?.split(",").map(tag => tag.trim()).filter(Boolean),
  };

  const { error: updateError } = await supabase.from("games").update(updatedGame).eq("slug", slug);

  if (updateError) {
    console.error(updateError.message);
    status = "error";
  } else {
    window.location.href = "/admin"; // Redirect after saving
  }
}
---

<BaseLayout>
  <section class="max-w-4xl mx-auto py-12">
    <h1 class="text-4xl font-bold mb-8">Edit Game: {game?.title || "Unknown"}</h1>

    {game ? (
      <form on:submit={handleSubmit} class="space-y-6">
        <input type="text" name="title" value={game.title} required class="input" />
        <input type="text" name="slug" value={game.slug} required class="input" />
        <input type="text" name="tagline" value={game.tagline} class="input" />
        <textarea name="description" class="input">{game.description}</textarea>

        <input type="text" name="genre" value={game.genre} class="input" />
        <input type="text" name="tone" value={game.tone} class="input" />
        <textarea name="how_to_play" class="input">{game.how_to_play}</textarea>
        <input type="text" name="key_features" value={game.key_features?.join(", ")} class="input" />

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <select name="difficulty_to_learn" class="input">
            <option value="">Difficulty to Learn</option>
            {["Very Easy", "Easy", "Medium", "Hard", "Very Hard"].map(level => (
              <option value={level} selected={game.difficulty_to_learn === level}>{level}</option>
            ))}
          </select>
          <select name="difficulty_to_master" class="input">
            <option value="">Difficulty to Master</option>
            {["Very Easy", "Easy", "Medium", "Hard", "Very Hard"].map(level => (
              <option value={level} selected={game.difficulty_to_master === level}>{level}</option>
            ))}
          </select>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <input type="number" name="min_players" value={game.min_players} class="input" />
          <input type="number" name="max_players" value={game.max_players} class="input" />
          <input type="text" name="play_time" value={game.play_time} class="input" />
        </div>

        <input type="text" name="age_range" value={game.age_range} class="input" />
        <input type="number" name="publication_year" value={game.publication_year} class="input" />

        <div class="flex flex-wrap gap-6">
          <label><input type="checkbox" name="solo_mode" checked={game.solo_mode} /> Solo Mode</label>
          <label><input type="checkbox" name="organized_play" checked={game.organized_play} /> Organized Play</label>
          <label><input type="checkbox" name="online_play" checked={game.online_play} /> Online Play</label>
        </div>

        <input type="url" name="official_website" value={game.official_website} class="input" />
        <input type="url" name="rules_url" value={game.rules_url} class="input" />
        <input type="url" name="featured_image_url" value={game.featured_image_url} class="input" />
        <input type="url" name="video_url" value={game.video_url} class="input" />

        <textarea name="gallery" class="input">{game.gallery?.join(", ")}</textarea>
        <textarea name="community_links" class="input">{game.community_links?.join(", ")}</textarea>
        <input type="text" name="price_range" value={game.price_range} class="input" />
        <textarea name="where_to_buy" class="input">{game.where_to_buy?.join(", ")}</textarea>
        <textarea name="social_links" class="input">{game.social_links?.join(", ")}</textarea>

        <input type="text" name="tags" value={game.tags?.join(", ")} class="input" />

        <button type="submit" class="bg-red-600 text-white px-6 py-2 rounded">Save Changes</button>
        {status === "error" && <p class="text-red-600 mt-4">‚ùå Error updating the game.</p>}
      </form>
    ) : (
      <p>Game not found.</p>
    )}

    <script type="module">
      import { supabase } from "../../../lib/supabase";

      async function checkAuthClientSide() {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          window.location.href = "/admin/login";
        }
      }
      checkAuthClientSide();
    </script>
  </section>
</BaseLayout>