---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getEntryBySlug, getCollection } from "astro:content";
import TableOfContents from "../../components/TableOfContents";
import { useState } from "react";

export const prerender = true;

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
  }));
}

const { slug } = Astro.params;
const postEntry = await getEntryBySlug('blog', slug);

if (!postEntry) {
  throw new Error(`Post not found for slug: ${slug}`);
}

const { Content, headings } = await postEntry.render();

const posts = await getCollection('blog');
const index = posts.findIndex((p) => p.slug === slug);
const prevPost = index > 0 ? posts[index - 1] : null;
const nextPost = index < posts.length - 1 ? posts[index + 1] : null;

function calculateReadingTime(bodyText) {
  const wordsPerMinute = 200;
  const words = bodyText.trim().split(/\s+/).length;
  const time = Math.ceil(words / wordsPerMinute);
  return time;
}
const readingTime = postEntry.body ? calculateReadingTime(postEntry.body) : 0;
---

<BaseLayout title={`${postEntry.data.title} | Hobbinomicon`}>
  <section class="py-12">
    <div class="max-w-6xl mx-auto px-4 grid grid-cols-1 md:grid-cols-[3fr_1fr] gap-8">

      <!-- Main Content -->
      <div>
        <nav class="text-sm mb-6 text-gray-500">
          <a href="/" class="hover:text-red-600">Home</a> &rsaquo; 
          <a href="/blog" class="hover:text-red-600">Blog</a> &rsaquo; 
          <span class="text-gray-900">{postEntry.data.title}</span>
        </nav>

        <h1 class="text-4xl font-bold mb-2">{postEntry.data.title}</h1>
        <p class="text-gray-500 text-sm mb-4">
          {postEntry.data.pubDate ? new Date(postEntry.data.pubDate).toLocaleDateString() : ''} 
          {readingTime ? ` • ${readingTime} min read` : ''}
        </p>

        {postEntry.data.featuredImage && (
          <img src={postEntry.data.featuredImage} alt={postEntry.data.title} class="rounded-lg mb-8 w-full" />
        )}
 <!-- Mobile Toggle -->
 <div class="block md:hidden mb-8">
  <details class="border rounded-md">
    <summary class="cursor-pointer px-4 py-3 font-semibold bg-gray-100">
      Table of Contents
    </summary>
    <div class="px-4 py-2">
      <TableOfContents headings={headings.map(({ slug, text, depth }) => ({ slug, text, depth }))} client:only="react" />
    </div>
  </details>
</div>
<article
class="prose max-w-none prose-lg 
  [&_p]:mb-4 [&_strong]:mb-2 [&_a]:text-red-600 [&_a]:no-underline [&_a:hover]:underline
  [&_h1]:mt-12 [&_h1]:mb-6 [&_h1]:scroll-mt-28 [&_h1]:text-4xl
  [&_h2]:mt-10 [&_h2]:mb-4 [&_h2]:scroll-mt-24 [&_h2]:text-3xl
  [&_h3]:mt-8 [&_h3]:mb-3 [&_h3]:scroll-mt-20 [&_h3]:text-2xl
  [&_h4]:mt-6 [&_h4]:mb-2 [&_h4]:scroll-mt-16 [&_h4]:text-xl"
>
          <Content />
        </article>

        <div class="flex justify-between items-center mt-12 border-t pt-8">
          {prevPost && (
            <a href={`/blog/${prevPost.slug}`} class="text-red-600 hover:underline">
              ← {prevPost.data.title}
            </a>
          )}
          {nextPost && (
            <a href={`/blog/${nextPost.slug}`} class="text-red-600 hover:underline ml-auto">
              {nextPost.data.title} →
            </a>
          )}
        </div>
      </div>

      <!-- Sidebar + Mobile TOC -->
      <aside>
        <!-- Desktop Sticky -->
        <div class="hidden md:block sticky top-24">
          <h2 class="text-xl font-bold mb-4">Table of Contents</h2>
          <TableOfContents headings={headings.map(({ slug, text, depth }) => ({ slug, text, depth }))} client:only="react" />
        </div>

       
      </aside>
    </div>
  </section>
</BaseLayout>